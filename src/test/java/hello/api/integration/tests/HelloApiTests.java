/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hello.api.integration.tests;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static io.restassured.RestAssured.baseURI;
import static io.restassured.RestAssured.given;
import static io.restassured.RestAssured.port;
import static org.junit.Assert.assertEquals;

import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.client.WireMock;

import hello.api.integration.tests.model.Job;
import hello.api.integration.tests.model.Name;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class HelloApiTests {
	private static final String JOBS_BASE_PATH = "/v1/jobs";
	private static final String JOBS_MOCK_URL = "localhost";
	private static final int JOBS_MOCK_PORT = 10500;
	
	private static final String BASE_URL = "http://localhost";
	private static final int BASE_PORT = 8081;
	
	private WireMock jobsMock;
	
	@Before
	public void setup() {
		// REST Assured config
		baseURI = BASE_URL;
		port = BASE_PORT;
		
		// WireMock config
		jobsMock = new WireMock(JOBS_MOCK_URL, JOBS_MOCK_PORT);
	}
	
	@Test
	public void testCreate() {
		// generate a new random name
		Name requestName = new Name().withName(RandomStringUtils.randomAlphabetic(8));
		
		// POST a new name
		Response postResponse = given()
			.contentType(ContentType.JSON)
			.body(requestName)
			.post("/v1/hello/names");
		
		// get the Location header
		String location = postResponse.getHeader("Location");
		
		// validate POST status code
		postResponse
			.then()
				.statusCode(201);
		
		// GET the new name from the scraped Location header
		Response getResponse = given()
			.get(location);
		
		// Map the response body
		Name responseName = getResponse.as(Name.class);
		
		// validate GET status code
		getResponse
			.then()
				.statusCode(200);
		
		// validate GET response body matches POST request body
		assertEquals(requestName.getName(), responseName.getName());
	}
	
	@Test
	public void testDelete() {
		// since we seed migrate on-demand, we KNOW these values exist
		String name = "zelda";
		Long id = 2L;
		
		// DELETE and validate status code
		given()
			.delete("/v1/hello/names/" + name)
				.then()
					.statusCode(204);
		
		// GET and validate the deleted name does not exist
		given()
			.get("/v1/hello/names/" + String.valueOf(id))
				.then()
					.statusCode(404);
	}
	
	@Test
	public void testGetJob() {
		// since we're stubbing the response from the dependent service, we KNOW these will exist
		String name = "Bob";
		Job stubbedJob = new Job().withCompanyName("The").withJobTitle("Builder");
		
		// stub response from the out-of-scope external dependency
		stubJobResponse(name, stubbedJob, 200);
		
		// execute the GET request
		Response response = given()
				.get("/v1/hello/jobs/" + name);
		
		// validate the status code
		response
			.then()
			.statusCode(200);
		
		// extract the response body from the service-under-test
		Job jobResponse = response.as(Job.class);
		
		// validate specific properties our service-under-test returns are the
		// same as the out-of-scope service responded with
		assertEquals(stubbedJob.getCompanyName(), jobResponse.getCompanyName());
		assertEquals(stubbedJob.getJobTitle(), jobResponse.getJobTitle());
	}
	
	@Test
	public void testGetJob_jobsServerError() {
		stubJobResponse("bob", null, 500);
		
		given()
			.get("/v1/hello/jobs/bob")
				.then()
					.statusCode(500);
	}
	
	@Test
	public void testGetJob_jobsNotFound() {
		stubJobResponse("bob", null, 404);
		
		given()
			.get("/v1/hello/jobs/bob")
				.then()
					.statusCode(404);
	}
	
    private void stubJobResponse(String requestName, Job responseBody, int statusCode) {
    	ObjectMapper objectMapper = new ObjectMapper();

    	String responseJson = "";
    	try {
			responseJson = responseBody == null ? "" : objectMapper.writeValueAsString(responseBody);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
    	
    	// @formatter:off
    	jobsMock.register(
    			get(urlEqualTo(JOBS_BASE_PATH + "/" + requestName))
	            .willReturn(aResponse()
                    .withHeader("Content-Type", "application/json")
                    .withBody(responseJson)
                    .withStatus(statusCode)));
    	// @formatter:on
    }
}
